
@{
    ViewBag.Title = "New";
}

<section class="content-header">
    <h1>&nbsp;</h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li><a href="#">Examples</a></li>
        <li class="active">Blank page</li>
    </ol>
</section>
<section class="content" id="vue-app">
    <div class="row">
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <div class="box box-info">
                <div class="box-header">
                    <h1 class="page-header">Edit Request</h1>
                    @*<small><b>Status: </b>New</small>*@
                    <b>Status: </b>New
                </div>
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="input-heading">Lecturer</label>
                            <dropdown-input placeholder="Search..." display-prop="FullName" url="@Url.HttpRouteUrl("DefaultApi", new {Controller = "Person", Action = "Supervisors" })"
                                            dependent-property="Teacher"></dropdown-input>
                        </div>
                        <div class="col-md-4">
                            <label class="input-heading">Reviewer</label>
                            <select class="form-control">
                                <option disabled selected>Select Lecturer</option>
                                <option>John Doe</option>
                                <option>Alex Brown</option>
                                <option>Jon Snow</option>
                                <option>Kanye West</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="input-heading">Student</label>
                            <select class="form-control">
                                <option disabled selected>Select Lecturer</option>
                                <option>John Doe</option>
                                <option>Alex Brown</option>
                                <option>Jon Snow</option>
                                <option>Kanye West</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-md-6">
                            <label class="input-heading">Tema Lv</label>
                            <div class="form-group">
                                <textarea class="form-control" placeholder="LV Title"></textarea>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label class="input-heading">Tema Eng</label>
                            <textarea class="form-control" placeholder="Eng Title"></textarea>
                        </div>
                    </div>
                </div>
                <div class="box-footer">

                    <div class="pull-left">
                        <a href="@Url.Action("Index","Request")" class="btn btn-default">Cancel</a>
                    </div>
                    <div class="pull-right">
                        <button type="button" class="btn btn-primary">Submit</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2"></div>
    </div>
</section>

@section scripts{

    <script type="text/x-template" id="dropdown-input">
        <div class="component-dropdown">
            <div class="input-group">

                <input type="text" name="q" class="form-control" autocomplete="off"
                       v-on:keydown="onChange" v-bind:placeholder="placeholder" v-model="search" />

                <span class="input-group-btn">
                    <button type="submit" name="search" id="search-btn" class="btn btn-flat" v-on:click="startSearch">
                        <i class="fa fa-search"></i>
                    </button>
                </span>
            </div>
            <dropdown-data :showContent="showContent"
                           :hideData="hideData"
                           :showData="showData"
                           :changeValue="changeValue"
                           :list="list"
                           :displayProp="displayProp"
                           :isPending="isPending">
            </dropdown-data>
        </div>
    </script>

    <script type="text/x-template" id="dropdown-data">
        <div class="component-dropdown-content" v-bind:class="{ show: showContent }">
            <ul class="list-group">
                <li class="spinner list-group-item" v-if="isPending">
                    <i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>
                </li>
                <li class="list-group-item active" v-if="showContent && !isPending && list.length > 0">
                    Teachers
                    <div class="box-tools pull-right text-info">
                        <button type="button" style="padding-top:0px" v-on:click="close" class="btn btn-box-tool">
                            <i class="fa fa-times"></i>
                        </button>
                    </div>
                </li>
                <li class="text-center list-group-item" v-if="!isPending && list.length === 0">0 records found <div class="box-tools pull-right"> <button type="button" style="padding-top:0px" v-on:click="close" class="btn btn-box-tool"><i class="fa fa-times"></i></button></div></li>
                <dropdown-data-item v-for="item in list" :entity="item" :displayProp="displayProp" class="list-group-item clickable" :setParent="setValue"></dropdown-data-item>
            </ul>
        </div>
    </script>

    <script type="text/x-template" id="dropdown-data-item">
        <li class="list-group-item"
            v-on:click="onClick">
            {{this.displayText}}
        </li>
    </script>

    <script>
        var dropdownDataItem = {
            template: '#dropdown-data-item',
            props: ['entity', 'displayProp', 'setParent'],
            data: function () {
                return {
                    displayText: this.entity['FullName']
                };
            },
            methods: {
                onClick: function () {
                    this.setParent(this.entity);
                }
            }
        }

        var dropdownInput = {
            created: function () {
                var self = this;
                bus.$on('dropdrown-component-open', function (component) {
                    if (self !== component) {
                        self.hideData();
                    }
                });
                bus.$on('window-esc-keypdown', function (component) {
                    self.hideData();
                });

                this.search = this.data[this.dependentProperty][this.displayProp];
            },
            template: '#dropdown-input',
            props: ['placeholder', 'displayProp', 'dependentProperty', 'url'],
            data: function () {
                return {
                    showContent: false,
                    timeoutId: -1,
                    search: "",
                    list: [],
                    isPending: false,
                    data: {
                        Id: 321,
                        Teacher: {
                            FullName: "Magic Johnson"
                        }
                    },
                    bus: bus
                };
            },

            methods: {
                onChange: function () {
                    var context = this;

                    context.showData();
                    context.isPending = true;
                    context.list.splice(0, context.list.length);

                    if (this.timeoutId > 0) {
                        clearTimeout(this.timeoutId);
                    }

                    if (event.keyCode && event.keyCode === 27) {
                        context.hideData();
                        context.isPending = false;
                        return;
                    }

                    this.timeoutId = setTimeout(function () {

                        $.ajax({
                            url: context.url,
                            method: "GET",
                            data: { search: context.search },
                            contentType: "application/json; UTF8",
                        }).done(function (data) {

                            console.log('data', data);
                            context.list.splice(0, context.list.length);
                            $.each(data, function (idx, val) {
                                val.displayText = val.FullName;
                                context.list.push(val);
                            });

                            //self.list = data;
                        }).error(function (xhr, param1, param2, param3) {
                            toastr.error(param2);
                            console.log(xhr, param1, param2, param3);
                        }).always(function () {
                            context.isPending = false;
                        });

                    }, 300);
                },

                showData: function () {
                    bus.$emit('dropdrown-component-open', this);
                    this.showContent = true;
                },

                hideData: function () {
                    this.showContent = false;

                    if (this.search !== this.data[this.dependentProperty][this.displayProp]) {
                        this.search = this.data[this.dependentProperty][this.displayProp];
                    }
                },

                startSearch: function () {
                    this.onChange();
                },

                changeValue: function (newVal) {
                    this.data[this.dependentProperty] = newVal;
                    this.search = newVal[this.displayProp];

                    this.hideData();
                }
            }
        };

        var dropdownData = {
            created: function () {
                console.log('list', this.list);
            },
            template: '#dropdown-data',
            props: ['showContent', 'hideData', 'showData', 'changeValue', 'list', 'isPending', 'displayProp'],
            data: function () {
                return {
                }
            },
            methods: {
                setValue: function (newVal) {
                    var context = this;
                    this.changeValue(newVal);
                    this.hideData();
                },
                close: function () {
                    this.hideData();
                }
            }
        };

        Vue.component('dropdown-input', dropdownInput);
        Vue.component('dropdown-data', dropdownData);
        Vue.component('dropdown-data-item', dropdownDataItem);

        var app = new Vue({
            el: '#vue-app'
        });


        async.parallel([
        
            function () {
            $.ajax({
                url: context.url,
                method: "GET",
                data: { search: context.search },
                contentType: "application/json; UTF8",
            }).done(function (data) {

            }).error(function (xhr, param1, param2, param3) {
                toastr.error(param2);
                console.log(xhr, param1, param2, param3);
            }).always(function () {
                context.isPending = false;
            });

        }, 300);
        }
        ], function () {
            alert('all loaded');
        });


    </script>

}